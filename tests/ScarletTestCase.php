<?php
require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__).'/../Scarlet.php';
require_once dirname(__FILE__).'/phpQuery.php';

/**
 * Test class for Scarlet.
 * Generated by PHPUnit on 2010-07-02 at 06:34:54.
 */
class ScarletTestCase extends PHPUnit_Framework_TestCase
{
    /**
     * @var Scarlet
     */
    protected $object;
	private $creator_pool;

    private function data() {
		return array(
			// library path relative to this file
			'viva:la:vida' => '../test-library-0',
			'john:mayer' => '../test-library-0',
			'halo' => '../../test-library-1',
			'tribal:runner' => '../../test-library-1',
			// 'when:love:comes:to:town' => '../../../library-test-2',
			// 'when:love:comes' => '../../../library-test-2'
		);
	}

    protected function setUp() {
		$data = $this->data();
		
		foreach ($data as $namespace => $library) {
			$creator = creator($namespace, realpath(dirname(__FILE__).'/'.$library));
			$this->creator_pool[$namespace] = $creator;
			
			// Add stylesheets
			for ($i=0; $i < 10; $i++) { 
				$creator->attach("style$i.css");
			}
			for ($i=10; $i < 20; $i++) { 
				$creator->attach("stylesheets/style$i.css");
			}
		
			// Add javascript
			for ($i=0; $i < 10; $i++) { 
				$creator->attach("script$i.js");
			}
			for ($i=10; $i < 20; $i++) { 
				$creator->attach("scripts/script$i.js");
			}
		
			// Add images
			for ($i=0; $i < 10; $i++) { 
				$creator->attach("img$i.jpg");
			}
			for ($i=10; $i < 20; $i++) { 
				$creator->attach("images/img$i.jpg");
			}
		
			$creator->init();
		}
		
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
		foreach ($this->creator_pool as $creator) {
			$creator->cleanUp();
		}
		
		S()->removeLibrary(S()->library());
    }

    /**
     * @todo Implement testFind().
     */
    public function testFind()
    {
        // Test without namespace
		$S = S();
		$file = $S->find('slideshow');
		$path = SCARLET_LIBRARY_DIR.'/slideshow/slideshow/Slideshow.php';
		$this->assertEquals(0, strcasecmp($path, $file), 'Found slideshow' );
		$data = $this->data();
		
		$S->library('../test-library-0');
		$file = $S->find('john:mayer');
		
		$path = $_SERVER['DOCUMENT_ROOT'].'/ScarletFinal/test-library-0/john/mayer/mayer.php';
		$this->assertEquals(0, strcasecmp($path , $file), 'Found mayer' );
		
		$S->library('../../test-library-1');
		$file = $S->find('halo');
		$path = $_SERVER['DOCUMENT_ROOT'].'/test-library-1/halo/halo/halo.php';
		$this->assertEquals(0, strcasecmp($path , $file), 'Found halo' );

		// Test with namespace - should now be talking to Tag
		$S = S('tribal:runner');
		$file = $S->find();
		$path = $_SERVER['DOCUMENT_ROOT'].'/test-library-1/tribal/runner/runner.php';
		$this->assertEquals(0, strcasecmp($file, $path), 'Found runner' );

		// Given namespace always overrides implicit
		$file = $S->find('viva:la:vida');
		$path = $_SERVER['DOCUMENT_ROOT'].'/ScarletFinal/test-library-0/viva/la/vida/vida.php';
		$this->assertEquals(0, strcasecmp($path , $file), 'Found runner' );
		
		// Test a namespace that isn't there
		$this->assertFalse($S->find('al:la:carte'), 'Al-la-carte cannot be found');
    }

    public function testLibrary()
    {
		$data = $this->data();
		$S = S();
		
		// Default library
		$arr = $S->library();
		$this->assertContains( '/Users/Matt/Sites/ScarletFinal/library', $arr, '1. library has: '.'/Users/Matt/Sites/ScarletFinal/library' );
		
		// Add library
		$tag = key($data);
		$return = $S->library($data[$tag]); 
		$arr = $S->library();
		$this->assertContains( realpath($data[$tag]), $arr, '1. library has: '.$data[$tag] );
		$this->assertSame( $S, $return, 'Scarlet returned' );
		
		next($data);
		$tag1 = key($data);
		next($data);
        $tag2 = key($data);

		$return = $S->library($data[$tag1], $data[$tag2]); 
		$arr = $S->library();
		$this->assertContains( realpath($data[$tag]), $arr, '2. library has: '.$data[$tag] );
		$this->assertContains( realpath($data[$tag1]), $arr, '3. library has: '.$data[$tag1] );
		$this->assertContains( realpath($data[$tag2]), $arr, '4. library has: '.$data[$tag2] );
		$this->assertSame( $S, $return, 'Scarlet returned' );
		
    }

    public function testLocation()
    {
	
    	foreach ($this->data() as $namespace => $library) {
			$file = S($namespace, $library)->find();

			$dir = S($namespace, $library)->location();
			$this->assertEquals( dirname($file), $dir, 'found the correct location: '.$dir );
    	}

		S()->removeLibrary(S()->library());
		
		// Without supplied namespace
    	foreach ($this->data() as $namespace => $library) {
			S()->library($library);
			$file = S()->find($namespace);
			$dir = S()->location($namespace);
			$this->assertEquals( dirname($file), $dir, 'found the correct location without supplied namespace: '.$dir );
		}
		
		S()->removeLibrary(S()->library());

		// Supplied overrides implicit
		$data = $this->data();
		S()->library('../../test-library-1');
		
		$s = S('john:mayer', $data['john:mayer']);
		$file = $s->find('tribal:runner');
		$dir = $s->location('tribal:runner');

		$path = realpath('../../test-library-1').'/tribal/runner';
		$this->assertEquals( dirname($file), $path, 'directory found using dirname(find())' );
		$this->assertEquals( $dir, $path, 'directory found using location()' );
    }

    public function testConstruct()
    {
        $tag = S('slideshow');
		$this->assertTrue( ($tag instanceof Tag), 'slideshow is a Tag' );

		// Should be true at some point
		// $tag->__tostring();
		// $this->assertTrue( ($tag instanceof Slideshow), '$tag is a slideshow' );
		
		$new_tag = S($tag);
		$this->assertTrue( ($new_tag instanceof Tag), '$new_tag is a Tag' );
		$this->assertTrue(($tag === $new_tag), '$tag === $new_tag' );

		$s = S();
		$this->assertTrue( ($s instanceof Scarlet), '$s is a Scarlet' );
		
		$tag = S('viva:la:vida', '../test-library-0');
		$this->assertTrue( ($tag instanceof Tag), 'viva:la:vida is a Tag' );
		
		$tag = S('john:mayer');
		$this->assertTrue( ($tag instanceof Tag), 'john:mayer is a Tag' );
    }
}
?>
